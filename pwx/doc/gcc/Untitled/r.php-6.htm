<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1251"><title>www.ПЕРВЫЕ ШАГИ.ru :: Шаг 6 - Создание динамической библиотеки</title></head><link rel=stylesheet type=text/css href="2.css" tppabs="http://www.firststeps.ru/2.css"><body text=black bgcolor=white link=blue vlink=blue alink=red><h2>Шаг 6 - Создание динамической библиотеки</h2><div style="margin:10px;"><p>Как мы уже говорили в шаге <a href="r.php-4.htm" tppabs="http://www.firststeps.ru/linux/r.php?4">"Шаг 4 - Библиотеки объектных файлов"</a> динамические библиотеки немного лучше статических, но их использование более сложное. И не из-за того, что процесс загрузки программы замедляется. Проблемы начинаются уже на этапе компиляции :)
<p>Для начала стоит сказать, что объектный файл создаваемый нашим проверенным способом вовсе не подходит для динамических библиотек. Связано это с тем, что все объектные файлы создаваемые обычным образом не имеют представления о том в какие адреса памяти будет загружена использующая их программа. Несколько различных программ могут использовать одну библиотеку, и каждая из них располагается в различном адресном пространстве. Поэтому требуется, чтобы переходы в функциях библиотеки (операции <b>goto</b> на ассемблере) использовали не абсолютную адресацию, а относительную. То есть генерируемый компилятором код должен быть независимым от адресов, такая технология получила название <b>PIC - Position Independent Code</b>. В компиляторе <b>gcc</b> данная возможность включается ключом <b>-fPIC</b>.
<p>Теперь компилирование наших файлов будет иметь вид:
<pre>
dron:~# gcc -fPIC -c f1.c
dron:~# gcc -fPIC -c f2.c
</pre>
<p>Динамическая библиотека это уже не архивный файл, а настоящая загружаемая программа, поэтому созданием динамических библиотек занимается сам компилятор <b>gcc</b>. Для того, чтобы создать динамическую библиотеку надо использовать ключ <b>-shared</b>:
<pre>
dron:~# gcc -shared -o libfsdyn.so f1.o f2.o
</pre>
<p>В результате получим динамическую библиотеку <b>libfsdyn.so</b>, которая по моей задумке будет динамической версией библиотеки <b>libfs.a</b>, что видно из названия :) Теперь, чтобы компилировать результирующий файл с использованием динамической библиотеки нам надо собрать файл командой:
<pre>
dron:~# gcc -с main.с
dron:~# gcc main.o -L. -lfsdyn -o rezultdyn
</pre>
<p>Если теперь Вы сравните файлы, полученные при использовании статической и динамической библиотеки, то увидите, что их размеры отличаются. В данном случае файл созданный с динамической библиотекой занимает чуть больше места, но это лишь от того, что программа используемая нами совершенно примитивная и львиную долю там занимает специальный код для использования динамических возможностей. В реальных условиях, когда используются очень большие функции размер программы с использованием динамической библиотеки значительно меньше.
<p>На этом фокусы не кончаются, если Вы сейчас попробуете запустить файл <b>rezultdyn</b>, то получите ошибку:
<pre>
dron:~# ./rezultdyn
./rezultdyn: error in loading shared libraries: libfsdyn.so: cannot open 
shared object file: No such file or directory
dron:~#
</pre>
<p>Это сообщение выдает динамический линковщик. Он просто не может найти файл нашей динамической библиотеки. Дело в том, что загрузчик ищет файлы динамических библиотек в известных ему директориях, а наша директория ему не известна. Но это мы чуть отложим, потому что это достаточно сложный вопрос.
<p>А сейчас стоит поговорить еще об одном моменте использования библиотек. Я специально создал динамическую библиотеку с названием <b>fsdyn</b>, чтобы она отличалась от названия статической библиотеки <b>fs</b>. Дело в том, что если у Вас две библиотеки статическая и динамическая с одинаковыми названиями, то есть <b>libfs.a</b> и <b>libfs.so</b>, то компилятор всегда будет использовать динамическую библиотеку.
<p>Связано это с тем, что в ключе <b>-l</b> задается часть имени библиотеки, а префикс <b>lib</b> и окончание <b>.a</b> или <b>.so</b> приставляет сам компилятор. Так вот алгоритм работы компилятора таков, что если есть динамическая библиотека, то она используется по умолчанию. Статическая же библиотека используется когда компилятор не может обнаружить файл <b>.so</b> этой библиотеки. Во всей имеющейся у меня документации пишется, что если использовать ключ <b>-static</b>, то можно насильно заставить компилятор использовать статическую библиотеку. Отлично, попробуем...
<pre>
dron:~# gcc -staticmain.o -L. -lfs  -o rez1
</pre>
<p>Как бы я не пробовал играть с позицией ключа <b>-static</b>, результирующий файл <b>rez1</b> получается размером в 900 Кб. После применения программы <b>strip</b> размер ее уменьшается до 200 Кб, но это же не сравнить с тем, что наша первая статическая компиляция давала программу размером 10 Кб. А связано это с тем, что любая программа написанная на <b>C/C++</b> в <b>Linux</b> использует стандартную библиотеку <b>"C" library</b>, которая содержит в себе определения таких функций, как <b>printf()</b>, <b>write()</b> и всех остальных. Эта библиотека линкуется к файлу как динамическая, чтобы все программы написанные на <b>C++</b> могли использовать единожды загруженные функции. Ну, а при указании ключа <b>-static</b> компилятор делает линковку <b>libc</b> статической, поэтому размер кода увеличивается на все 200 Кб.
<p>Этот эффект я не смог побороть. Поэтому я пришел к выводу, что статическую библиотеку и динамическую лучше всего создавать с разными именами. Надеюсь в будущем мы с Вами еще разберемся с этой загвоздкой, но если действительно все так плохо, то решение с различными именами будет единственно верным.</div><center><hr><a href="r.php-5.htm" tppabs="http://www.firststeps.ru/linux/r.php?5">Предыдущий Шаг</a> | <a href="r.php-7.htm" tppabs="http://www.firststeps.ru/linux/r.php?7">Следующий Шаг</a> | <a href="general1.html" tppabs="http://www.firststeps.ru/linux/general1.html">Оглавление</a><br>Автор <a href="mailto:kuzinandrey@yandex.ru?SUBJECT=From_part_general#6'_on_[www.firststeps.ru]">Кузин Андрей</a>.<hr><iframe src="javascript:if(confirm('http://ad.adriver.ru/cgi-bin/erle.cgi?sid=9595&target=blank&bt=1&pz=0&rnd=8020  \n\nThis file was not retrieved by Teleport Pro, because it did not meet the project\'s file type specifications.  \n\nDo you want to open it from the server?'))window.location='http://ad.adriver.ru/cgi-bin/erle.cgi?sid=9595&target=blank&bt=1&pz=0&rnd=8020'" tppabs="http://ad.adriver.ru/cgi-bin/erle.cgi?sid=9595&target=blank&bt=1&pz=0&rnd=8020" frameborder=0 vspace=0 hspace=0 width=468 height=60 marginwidth=0 marginheight=0 scrolling=no><a href="javascript:if(confirm('http://ad.adriver.ru/cgi-bin/click.cgi?sid=9595&bt=1&pz=0&rnd=8020  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://ad.adriver.ru/cgi-bin/click.cgi?sid=9595&bt=1&pz=0&rnd=8020'" tppabs="http://ad.adriver.ru/cgi-bin/click.cgi?sid=9595&bt=1&pz=0&rnd=8020" target=_blank><img src="rle.cgi-sid=9595&bt=1&pz=0&rnd=8020" tppabs="http://ad.adriver.ru/cgi-bin/rle.cgi?sid=9595&bt=1&pz=0&rnd=8020" alt="-AdRiver-" border=0 width=468 height=60></a></iframe></center><br><br>